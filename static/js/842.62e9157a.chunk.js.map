{"version":3,"file":"static/js/842.62e9157a.chunk.js","mappings":"wNACA,EAA8B,+BAA9B,EAAwE,4BAAxE,EAA8G,2BAA9G,EAAwJ,gCAAxJ,EAAiM,0BAAjM,EAAkO,wBAAlO,EAAiQ,wBAAjQ,EAAuS,+BAAvS,EAA6V,wC,mECuB7V,GAAeA,EAAAA,EAAAA,IATE,WAEb,OACI,gBAAKC,UAAWC,EAAhB,UACI,SAACC,EAAD,SAONA,EAAO,WACT,IAAMC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UACzDI,GAAWC,EAAAA,EAAAA,MAWjB,OARAC,EAAAA,EAAAA,YAAU,WAEN,OADAF,GAASG,EAAAA,EAAAA,OACF,WACHH,GAASI,EAAAA,EAAAA,UAEd,KAIC,2BACgB,UAAXR,IAAsB,2EACvB,iCACI,SAACS,EAAD,KACA,SAACC,EAAD,WAMVD,EAAe,WACjB,IAAME,GAAoBC,EAAAA,EAAAA,QAAuB,MAC3CC,GAAWZ,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKU,YACjE,GAAwDC,EAAAA,EAAAA,WAAS,GAAjE,eAAOC,EAAP,KAA6BC,EAA7B,MAEAV,EAAAA,EAAAA,YAAU,WACqB,IAAD,EAAtBS,IACA,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAACC,SAAU,cAE1D,CAACN,IAWJ,OACI,iBAAKhB,UAAWC,EAAYsB,SAVR,SAACC,GACrB,IAAMC,EAAUD,EAAEE,cACdC,KAAKC,IAAKH,EAAQI,aAAeJ,EAAQK,UAAaL,EAAQM,cAAgB,KAC7Eb,GAAwBC,GAAwB,GAEjDD,GAAwBC,GAAwB,IAKpD,iBACKH,QADL,IACKA,OADL,EACKA,EAAUgB,KAAI,SAACC,GAAD,OAAO,SAACC,EAAD,CAAwBC,MAAOF,EAAEE,MAAOC,SAAUH,EAAEG,SACvCC,QAASJ,EAAEI,SADNJ,EAAEK,QAE1C,gBAAKC,IAAKzB,QAUhBoB,GAAwCM,EAAAA,EAAAA,OAAK,YAAiC,IAA/BL,EAA8B,EAA9BA,MAAOC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAClE,OACI,gBAAKrC,UAAWC,EAAhB,UACI,iBAAKD,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAUwC,IAAK,WAC1BC,IAAKP,GAAgBQ,KAE1B,iBAAK3C,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,UACI,SAAC2C,EAAA,EAAD,CAAYC,QAAS,YAArB,SAAmCT,OAEvC,gBAAKpC,UAAWC,EAAhB,UACI,SAAC2C,EAAA,EAAD,CAAYC,QAAS,QAArB,SAA+BR,iBAQ1CxB,EAAkB,WAE3B,IAAMV,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAC/D,GAA0Bc,EAAAA,EAAAA,UAAS,IAAnC,eAAO6B,EAAP,KAAcC,EAAd,KAEMxC,GAAWC,EAAAA,EAAAA,MAOXwC,EAAgB,WACbF,IAGLvC,GAAS0C,EAAAA,EAAAA,IAAwBH,IACjCC,EAAS,MAMb,OACI,iBAAK/C,UAAWC,EAAhB,WACI,qBAAUiD,WANQ,SAACC,GACT,UAAdA,EAAMC,KAAmBJ,KAKoBK,YAAa,mBAC5CP,MAAOA,EAAOQ,SAlBR,SAAC9B,GACrBuB,EAASvB,EAAEE,cAAcoB,WAkBrB,SAAC,KAAD,CAAQS,KAAM,OAAQC,SAAUR,EAAeS,SAAqB,UAAXtD","sources":["webpack://samurai-way/./src/components/chat/ui/chat-page.module.css?b54d","components/chat/ui/chat-page.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatWrapper\":\"chat-page_chatWrapper__hJnmo\",\"messages\":\"chat-page_messages__aK5je\",\"message\":\"chat-page_message__As1ex\",\"imageAndText\":\"chat-page_imageAndText__uxSB1\",\"avatar\":\"chat-page_avatar__nHf5L\",\"text\":\"chat-page_text__+Khqt\",\"name\":\"chat-page_name__3lMYS\",\"messageText\":\"chat-page_messageText__5NOrs\",\"addNewContentWrapper\":\"chat-page_addNewContentWrapper__yZ5ch\"};","import React, {ChangeEvent, FC, KeyboardEvent, memo, UIEvent, useEffect, useRef, useState} from 'react';\r\nimport s from './chat-page.module.css'\r\nimport {Button} from \"common/components\";\r\nimport {Typography} from \"@mui/material\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    sendMessageThunkCreator,\r\n    startMessagesListeningThunkCreator,\r\n    stopMessagesListeningThunkCreator\r\n} from \"components/chat/model/chat-reducer\";\r\nimport {AppStateType} from \"app/model/redux-store\";\r\nimport {withAuthRedirect} from \"common/hoc\";\r\nimport defaultPhoto from '../../../assets/images/user.jpg'\r\n\r\n\r\nconst ChatPage = () => {\r\n\r\n    return (\r\n        <div className={s.chatWrapper}>\r\n            <Chat/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default withAuthRedirect(ChatPage);\r\n\r\nconst Chat = () => {\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    useEffect(() => {\r\n        dispatch(startMessagesListeningThunkCreator())\r\n        return () => {\r\n            dispatch(stopMessagesListeningThunkCreator())\r\n        }\r\n    }, [])\r\n\r\n\r\n    return (\r\n        <div>\r\n            {status === 'error' && <div>Some error occurred. Please refresh the page</div>}\r\n            <>\r\n                <ChatMessages/>\r\n                <AddIMessageForm/>\r\n            </>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst ChatMessages = () => {\r\n    const messagesAnchorRef = useRef<HTMLDivElement>(null)\r\n    const messages = useSelector((state: AppStateType) => state.chat.messages)\r\n    const [isAutoScrollIsActive, setIsAutoScrollIsActive] = useState(true)\r\n\r\n    useEffect(() => {\r\n        if (isAutoScrollIsActive) {\r\n            messagesAnchorRef.current?.scrollIntoView({behavior: 'smooth'})\r\n        }\r\n    }, [messages])\r\n\r\n    const onScrollHandler = (e: UIEvent<HTMLDivElement>) => {\r\n        const element = e.currentTarget\r\n        if (Math.abs((element.scrollHeight - element.scrollTop) - element.clientHeight) < 300) {\r\n            !isAutoScrollIsActive && setIsAutoScrollIsActive(true)\r\n        } else {\r\n            isAutoScrollIsActive && setIsAutoScrollIsActive(false)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className={s.messages} onScroll={onScrollHandler}>\r\n            {messages?.map((m) => <ChatMessage key={m.id} photo={m.photo} userName={m.userName}\r\n                                               message={m.message}/>)}\r\n            <div ref={messagesAnchorRef}></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport type ChatMessagePropsType = {\r\n    photo: string\r\n    userName: string\r\n    message: string\r\n}\r\nconst ChatMessage: FC<ChatMessagePropsType> = memo(({photo, userName, message}) => {\r\n    return (\r\n        <div className={s.message}>\r\n            <div className={s.imageAndText}>\r\n                <img className={s.avatar} alt={'myAvatar'}\r\n                     src={photo ? photo : defaultPhoto}\r\n                />\r\n                <div className={s.text}>\r\n                    <div className={s.name}>\r\n                        <Typography variant={\"subtitle1\"}>{userName}</Typography>\r\n                    </div>\r\n                    <pre className={s.messageText}>\r\n                        <Typography variant={\"body2\"}>{message}</Typography>\r\n                    </pre>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n})\r\n\r\nexport const AddIMessageForm = () => {\r\n\r\n    const status = useSelector((state: AppStateType) => state.chat.status)\r\n    const [value, setValue] = useState('')\r\n\r\n    const dispatch = useDispatch()\r\n\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    const addNewMessage = () => {\r\n        if (!value) {\r\n            return\r\n        }\r\n        dispatch(sendMessageThunkCreator(value))\r\n        setValue('')\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        event.key === 'Enter' && addNewMessage()\r\n    }\r\n\r\n    return (\r\n        <div className={s.addNewContentWrapper}>\r\n            <textarea onKeyPress={onKeyPressHandler} placeholder={'send new message'}\r\n                      value={value} onChange={onChangeHandler}/>\r\n            <Button name={'send'} callback={addNewMessage} disabled={status !== \"ready\"}/>\r\n        </div>\r\n    );\r\n};"],"names":["withAuthRedirect","className","s","Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListeningThunkCreator","stopMessagesListeningThunkCreator","ChatMessages","AddIMessageForm","messagesAnchorRef","useRef","messages","useState","isAutoScrollIsActive","setIsAutoScrollIsActive","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","ChatMessage","photo","userName","message","id","ref","memo","alt","src","defaultPhoto","Typography","variant","value","setValue","addNewMessage","sendMessageThunkCreator","onKeyPress","event","key","placeholder","onChange","name","callback","disabled"],"sourceRoot":""}