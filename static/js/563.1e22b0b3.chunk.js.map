{"version":3,"file":"static/js/563.1e22b0b3.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/users/ui/users.module.css?0d7c","webpack://samurai-way/./src/components/users/ui/user/user.module.css?3b74","components/users/ui/user/user.tsx","webpack://samurai-way/./src/components/users/ui/user-search-form/usersSearchForm.module.css?2aa1","components/users/model/users-selectors.ts","components/users/ui/user-search-form/usersSearchForm.tsx","components/users/ui/users.tsx","components/users/ui/users-page.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"usersWrapper\":\"users_usersWrapper__lX8OC\",\"users\":\"users_users__Gyr0H\",\"pagination\":\"users_pagination__RrQLn\"};","// extracted by mini-css-extract-plugin\nexport default {\"userWrapper\":\"user_userWrapper__0vdw-\",\"userPhoto\":\"user_userPhoto__z-VdA\",\"userName\":\"user_userName__u5iD5\",\"userId\":\"user_userId__Ab0wN\"};","import React from 'react';\r\nimport styles from './user.module.css'\r\nimport userPhoto from '../../../../assets/images/user.jpg'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {UserType} from '../../model/users-reducer';\r\nimport {Button} from 'common/components';\r\nimport {Typography} from \"@mui/material\";\r\n\r\ntype UsersPropsType = {\r\n    user: UserType\r\n    followingInProgress: Array<number>\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n}\r\n\r\nexport const User: React.FC<UsersPropsType> = (props) => {\r\n    const {user, followingInProgress, follow, unfollow} = props\r\n\r\n    return (\r\n        <div className={styles.userWrapper}>\r\n            <NavLink to={'/profile/' + user.id}>\r\n                <img src={user.photos.small !== null ? user.photos.small : userPhoto} alt=\"avatar\"\r\n                     className={styles.userPhoto}/>\r\n            </NavLink>\r\n            <Typography className={styles.userName}>{user.name.length > 8 ? user.name.slice(0, 9) + '...' : user.name}</Typography>\r\n            <span className={styles.userId}>userId: {props.user.id}</span>\r\n            <div>\r\n                {user.followed\r\n                    ? <Button name={'UnFollow'} callback={() => unfollow(user.id)}\r\n                              disabled={followingInProgress.some(id => id === user.id)}/>\r\n                    : <Button name={'Follow'} callback={() => follow(user.id)}\r\n                              disabled={followingInProgress.some(id => id === user.id)}/>\r\n                }\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formDataWrapper\":\"usersSearchForm_formDataWrapper__EdvtU\",\"select\":\"usersSearchForm_select__NRNzI\",\"sendData\":\"usersSearchForm_sendData__NUBSB\"};","import {AppStateType} from 'app/model/redux-store';\r\nimport {SearchType, UserType} from './users-reducer';\r\nimport {createSelector} from 'reselect';\r\n\r\nconst getUsersSelector = (state: AppStateType): UserType[] => {\r\n    return state.usersPage.users\r\n}\r\nexport const getUsers = createSelector(getUsersSelector,(users) => {\r\n    return users.filter(u => true)\r\n})\r\n\r\nexport const getPageSize = (state: AppStateType): number => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUsersCount = (state: AppStateType): number => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getCurrentPage = (state: AppStateType): number => {\r\n    return state.usersPage.currentPage\r\n}\r\nexport const getIsFetching = (state: AppStateType): boolean => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getFollowingInProgress = (state: AppStateType): Array<number> => {\r\n    return state.usersPage.followingInProgress\r\n}\r\nexport const getUsersFilter = (state: AppStateType): SearchType => {\r\n    return state.usersPage.filter\r\n}","import {Field, Formik} from \"formik\";\r\nimport React, {FC, memo} from \"react\";\r\nimport {SearchType} from \"components/users/model/users-reducer\";\r\nimport s from './usersSearchForm.module.css'\r\nimport {useSelector} from \"react-redux\";\r\nimport {getUsersFilter} from \"components/users/model/users-selectors\";\r\n\r\ntype FriendFormType = \"true\" | 'false' | 'null';\r\ntype FormType = {\r\n    term: string,\r\n    friend: FriendFormType\r\n}\r\n\r\ntype PropsType = {\r\n    onFilterChanged: (filter: SearchType) => void\r\n}\r\n\r\nexport const UsersSearchForm: FC<PropsType> = memo(({onFilterChanged}) => {\r\n\r\n    const filter = useSelector(getUsersFilter)\r\n    const submit = (values: FormType, {setSubmitting}: { setSubmitting: (isSubmitting: boolean) => void }) => {\r\n        const filter: SearchType = {\r\n            term: values.term,\r\n            friend: values.friend === 'null' ? null : values.friend === 'true'\r\n        }\r\n        onFilterChanged(filter)\r\n        setSubmitting(false)\r\n    }\r\n\r\n    return (\r\n        <Formik enableReinitialize initialValues={{term: filter.term, friend: String(filter.friend) as FriendFormType}}\r\n                onSubmit={submit}>\r\n            {({values, handleSubmit, isSubmitting, handleChange}) => (\r\n                <form onSubmit={handleSubmit} className={s.formDataWrapper}>\r\n                    <input type=\"text\" name=\"term\" onChange={handleChange} value={values.term} placeholder={'type to search...'}/>\r\n                     <Field as=\"select\" name=\"friend\" className={s.select}>\r\n                        <option value=\"null\">all</option>\r\n                        <option value=\"true\">only followed</option>\r\n                        <option value=\"false\">only unfollowed</option>\r\n                    </Field>\r\n                    <button type=\"submit\" disabled={isSubmitting} className={s.sendData}>search</button>\r\n                </form>\r\n            )}\r\n        </Formik>\r\n    )\r\n})","import React, {useEffect} from 'react';\r\nimport {followThunkCreator, getUsersThunkCreator, SearchType, unfollowThunkCreator} from '../model/users-reducer';\r\nimport styles from './users.module.css'\r\nimport {User} from './user/user';\r\nimport Pagination from '@mui/material/Pagination';\r\nimport {useAutoAnimate} from \"@formkit/auto-animate/react\";\r\nimport {UsersSearchForm} from \"components/users/ui/user-search-form/usersSearchForm\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getPageSize,\r\n    getTotalUsersCount,\r\n    getUsers,\r\n    getUsersFilter\r\n} from \"components/users/model/users-selectors\";\r\nimport {useHistory} from \"react-router-dom\";\r\n\r\ntype QueryParamsType = { term?: string; page?: string; friend?: string };\r\nexport const Users = () => {\r\n\r\n    const [usersRef] = useAutoAnimate<HTMLDivElement>();\r\n\r\n    const totalUsersCount = useSelector(getTotalUsersCount)\r\n    const currentPage = useSelector(getCurrentPage)\r\n    const pageSize = useSelector(getPageSize)\r\n    const users = useSelector(getUsers)\r\n    const followingInProgress = useSelector(getFollowingInProgress)\r\n    const filter = useSelector(getUsersFilter)\r\n\r\n    const dispatch = useDispatch()\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const urlSearchParams = new URLSearchParams(history.location.search.substring(1));\r\n        const parsed = Object.fromEntries(urlSearchParams.entries()) as QueryParamsType;\r\n\r\n        let actualPage = currentPage;\r\n        let actualFilter = filter;\r\n\r\n        if (!!parsed.page) actualPage = Number(parsed.page);\r\n        if (!!parsed.term) actualFilter = { ...actualFilter, term: parsed.term as string };\r\n\r\n        switch (parsed.friend) {\r\n            case 'null':\r\n                actualFilter = { ...actualFilter, friend: null };\r\n                break;\r\n            case 'true':\r\n                actualFilter = { ...actualFilter, friend: true };\r\n                break;\r\n            case 'false':\r\n                actualFilter = { ...actualFilter, friend: false };\r\n                break;\r\n        }\r\n        dispatch(getUsersThunkCreator(actualPage, pageSize, actualFilter))\r\n    }, [])\r\n\r\n    useEffect(()=>{\r\n        const query = new URLSearchParams();\r\n\r\n        if (!!filter.term) {\r\n            query.set('term', filter.term);\r\n        }\r\n        if (filter.friend !== null) {\r\n            query.set('friend', String(filter.friend));\r\n        }\r\n        if (currentPage !== 1) {\r\n            query.set('page', String(currentPage));\r\n        }\r\n\r\n        history.push({\r\n            pathname: '/users',\r\n            search: query.toString(),\r\n        });\r\n    }, [filter, currentPage])\r\n\r\n\r\n    const onPageChanged = (pageNumber: number) => {\r\n        dispatch(getUsersThunkCreator(pageNumber, pageSize, filter))\r\n    }\r\n    const onFilterChanged = (filter: SearchType) => {\r\n        dispatch(getUsersThunkCreator(1, pageSize, filter))\r\n    }\r\n    const follow = (userId: number) => {\r\n        dispatch(followThunkCreator(userId))\r\n    }\r\n    const unfollow = (userId: number) => {\r\n        dispatch(unfollowThunkCreator(userId))\r\n    }\r\n\r\n    return (\r\n        <div className={styles.usersWrapper}>\r\n            <UsersSearchForm onFilterChanged={onFilterChanged}/>\r\n            <div ref={usersRef} className={styles.users}>\r\n                {users.map(u => {\r\n                        return (\r\n                            <User key={u.id} follow={follow} unfollow={unfollow} user={u}\r\n                                  followingInProgress={followingInProgress}/>\r\n                        )\r\n                    }\r\n                )}\r\n            </div>\r\n            <div className={styles.pagination}>\r\n                <Pagination count={Math.ceil(totalUsersCount / pageSize)}\r\n                            page={currentPage}\r\n                            onChange={(e: React.ChangeEvent<unknown>, value: number) => onPageChanged(value)}\r\n                            sx={{\r\n                                button: {\r\n                                    borderRadius: '2px',\r\n                                    marginRight: '20px',\r\n                                    marginLeft: '0px',\r\n                                    width: '24px',\r\n                                    height: '24px',\r\n                                    padding: '4px 8px',\r\n                                    fontSize: '14px',\r\n                                    fontWeight: 400,\r\n                                    backgroundColor: 'transparent',\r\n                                    '&:hover': {\r\n                                        backgroundColor: '#0066CC',\r\n                                        color: '#fff',\r\n                                    },\r\n                                    '&.Mui-selected': {\r\n                                        backgroundColor: '#0066CC',\r\n                                        color: '#fff',\r\n                                    },\r\n                                },\r\n                            }}\r\n                />\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {useSelector} from 'react-redux';\r\nimport {Users} from './users';\r\nimport {Preloader} from 'common/components';\r\nimport {getIsFetching} from '../model/users-selectors';\r\n\r\n\r\nconst  UsersPage = () => {\r\n\r\n    const isFetching = useSelector(getIsFetching)\r\n\r\n    return (\r\n        <>\r\n            {isFetching\r\n                ? <Preloader/>\r\n                : null}\r\n            <Users />\r\n        </>\r\n    )\r\n}\r\n\r\nexport default UsersPage\r\n"],"names":["User","props","user","followingInProgress","follow","unfollow","className","styles","to","id","src","photos","small","userPhoto","alt","Typography","name","length","slice","followed","callback","disabled","some","getUsers","createSelector","state","usersPage","users","filter","u","getPageSize","pageSize","getTotalUsersCount","totalUsersCount","getCurrentPage","currentPage","getIsFetching","isFetching","getFollowingInProgress","getUsersFilter","UsersSearchForm","memo","onFilterChanged","useSelector","enableReinitialize","initialValues","term","friend","String","onSubmit","values","setSubmitting","handleSubmit","isSubmitting","handleChange","s","type","onChange","value","placeholder","as","Users","useAutoAnimate","usersRef","dispatch","useDispatch","history","useHistory","useEffect","urlSearchParams","URLSearchParams","location","search","substring","parsed","Object","fromEntries","entries","actualPage","actualFilter","page","Number","getUsersThunkCreator","query","set","push","pathname","toString","userId","followThunkCreator","unfollowThunkCreator","ref","map","Pagination","count","Math","ceil","e","pageNumber","sx","button","borderRadius","marginRight","marginLeft","width","height","padding","fontSize","fontWeight","backgroundColor","color"],"sourceRoot":""}