{"version":3,"file":"static/js/524.11cacf95.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/login/ui/login.module.css?fefa","common/utils/validators/validators.ts","../node_modules/@mui/material/FormLabel/formLabelClasses.js","../node_modules/@mui/material/FormLabel/FormLabel.js","../node_modules/@mui/material/FormControl/formControlState.js","components/login/ui/login-form/login-form.tsx","components/login/ui/login-page.tsx","webpack://samurai-way/./src/components/login/ui/login-form/login-form.module.css?3e96"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"loginWrapper\":\"login_loginWrapper__rcTNA\",\"title\":\"login_title__ZqXn-\"};","export type FieldValidatorType = (value: string) => string | undefined\r\nexport const required: FieldValidatorType = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","import { unstable_generateUtilityClasses as generateUtilityClasses } from '@mui/utils';\nimport generateUtilityClass from '../generateUtilityClass';\nexport function getFormLabelUtilityClasses(slot) {\n  return generateUtilityClass('MuiFormLabel', slot);\n}\nconst formLabelClasses = generateUtilityClasses('MuiFormLabel', ['root', 'colorSecondary', 'focused', 'disabled', 'error', 'filled', 'required', 'asterisk']);\nexport default formLabelClasses;","import _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport _extends from \"@babel/runtime/helpers/esm/extends\";\nconst _excluded = [\"children\", \"className\", \"color\", \"component\", \"disabled\", \"error\", \"filled\", \"focused\", \"required\"];\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport { unstable_composeClasses as composeClasses } from '@mui/base';\nimport formControlState from '../FormControl/formControlState';\nimport useFormControl from '../FormControl/useFormControl';\nimport capitalize from '../utils/capitalize';\nimport useThemeProps from '../styles/useThemeProps';\nimport styled from '../styles/styled';\nimport formLabelClasses, { getFormLabelUtilityClasses } from './formLabelClasses';\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nconst useUtilityClasses = ownerState => {\n  const {\n    classes,\n    color,\n    focused,\n    disabled,\n    error,\n    filled,\n    required\n  } = ownerState;\n  const slots = {\n    root: ['root', `color${capitalize(color)}`, disabled && 'disabled', error && 'error', filled && 'filled', focused && 'focused', required && 'required'],\n    asterisk: ['asterisk', error && 'error']\n  };\n  return composeClasses(slots, getFormLabelUtilityClasses, classes);\n};\nexport const FormLabelRoot = styled('label', {\n  name: 'MuiFormLabel',\n  slot: 'Root',\n  overridesResolver: ({\n    ownerState\n  }, styles) => {\n    return _extends({}, styles.root, ownerState.color === 'secondary' && styles.colorSecondary, ownerState.filled && styles.filled);\n  }\n})(({\n  theme,\n  ownerState\n}) => _extends({\n  color: (theme.vars || theme).palette.text.secondary\n}, theme.typography.body1, {\n  lineHeight: '1.4375em',\n  padding: 0,\n  position: 'relative',\n  [`&.${formLabelClasses.focused}`]: {\n    color: (theme.vars || theme).palette[ownerState.color].main\n  },\n  [`&.${formLabelClasses.disabled}`]: {\n    color: (theme.vars || theme).palette.text.disabled\n  },\n  [`&.${formLabelClasses.error}`]: {\n    color: (theme.vars || theme).palette.error.main\n  }\n}));\nconst AsteriskComponent = styled('span', {\n  name: 'MuiFormLabel',\n  slot: 'Asterisk',\n  overridesResolver: (props, styles) => styles.asterisk\n})(({\n  theme\n}) => ({\n  [`&.${formLabelClasses.error}`]: {\n    color: (theme.vars || theme).palette.error.main\n  }\n}));\nconst FormLabel = /*#__PURE__*/React.forwardRef(function FormLabel(inProps, ref) {\n  const props = useThemeProps({\n    props: inProps,\n    name: 'MuiFormLabel'\n  });\n  const {\n      children,\n      className,\n      component = 'label'\n    } = props,\n    other = _objectWithoutPropertiesLoose(props, _excluded);\n  const muiFormControl = useFormControl();\n  const fcs = formControlState({\n    props,\n    muiFormControl,\n    states: ['color', 'required', 'focused', 'disabled', 'error', 'filled']\n  });\n  const ownerState = _extends({}, props, {\n    color: fcs.color || 'primary',\n    component,\n    disabled: fcs.disabled,\n    error: fcs.error,\n    filled: fcs.filled,\n    focused: fcs.focused,\n    required: fcs.required\n  });\n  const classes = useUtilityClasses(ownerState);\n  return /*#__PURE__*/_jsxs(FormLabelRoot, _extends({\n    as: component,\n    ownerState: ownerState,\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other, {\n    children: [children, fcs.required && /*#__PURE__*/_jsxs(AsteriskComponent, {\n      ownerState: ownerState,\n      \"aria-hidden\": true,\n      className: classes.asterisk,\n      children: [\"\\u2009\", '*']\n    })]\n  }));\n});\nprocess.env.NODE_ENV !== \"production\" ? FormLabel.propTypes /* remove-proptypes */ = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n  /**\n   * Override or extend the styles applied to the component.\n   */\n  classes: PropTypes.object,\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n  /**\n   * The color of the component.\n   * It supports both default and custom theme colors, which can be added as shown in the\n   * [palette customization guide](https://mui.com/material-ui/customization/palette/#adding-new-colors).\n   */\n  color: PropTypes /* @typescript-to-proptypes-ignore */.oneOfType([PropTypes.oneOf(['error', 'info', 'primary', 'secondary', 'success', 'warning']), PropTypes.string]),\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes.elementType,\n  /**\n   * If `true`, the label should be displayed in a disabled state.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true`, the label is displayed in an error state.\n   */\n  error: PropTypes.bool,\n  /**\n   * If `true`, the label should use filled classes key.\n   */\n  filled: PropTypes.bool,\n  /**\n   * If `true`, the input of this label is focused (used by `FormGroup` components).\n   */\n  focused: PropTypes.bool,\n  /**\n   * If `true`, the label will indicate that the `input` is required.\n   */\n  required: PropTypes.bool,\n  /**\n   * The system prop that allows defining system overrides as well as additional CSS styles.\n   */\n  sx: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.oneOfType([PropTypes.func, PropTypes.object, PropTypes.bool])), PropTypes.func, PropTypes.object])\n} : void 0;\nexport default FormLabel;","export default function formControlState({\n  props,\n  states,\n  muiFormControl\n}) {\n  return states.reduce((acc, state) => {\n    acc[state] = props[state];\n    if (muiFormControl) {\n      if (typeof props[state] === 'undefined') {\n        acc[state] = muiFormControl[state];\n      }\n    }\n    return acc;\n  }, {});\n}","import React from 'react';\r\nimport {InjectedFormProps, reduxForm} from 'redux-form';\r\nimport classes from './login-form.module.css';\r\nimport {CheckboxWrapper, createField, Input} from 'common/components';\r\nimport {required} from 'common/utils';\r\nimport {FormLabel, Typography} from '@mui/material';\r\n\r\n\r\nexport type FormDataType = {\r\n    email: string\r\n    password: string\r\n    rememberMy: boolean\r\n    captcha: string\r\n}\r\ntype LoginFormOwnProps = {\r\n    captcha: string | null\r\n}\r\ntype LoginFormKeyValuesType = keyof FormDataType\r\nconst LoginForm: React.FC<InjectedFormProps<FormDataType, LoginFormOwnProps> & LoginFormOwnProps> = ({\r\n                                                                                                       handleSubmit,\r\n                                                                                                       error,\r\n                                                                                                       captcha\r\n                                                                                                   }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit} className={classes.formControl}>\r\n            <FormLabel className={classes.formLabel}>\r\n                <Typography>\r\n                    To log in get registered <a className={classes.link} href={'https://social-network.samuraijs.com/'}\r\n                                                target={'_blank'} rel=\"noreferrer\">here</a>\r\n                </Typography>\r\n                <Typography>\r\n                    or use common test account credentials:\r\n                </Typography>\r\n                <Typography> Email: free@samuraijs.com\r\n                </Typography>\r\n                <Typography>\r\n                    Password: free\r\n                </Typography>\r\n            </FormLabel>\r\n            <div className={classes.email}>\r\n                {createField<LoginFormKeyValuesType>('Email', 'email', [required], Input)}\r\n            </div>\r\n            <div className={classes.password}>\r\n                {createField<LoginFormKeyValuesType>('Password', 'password', [required], Input, {type: 'password'})}\r\n            </div>\r\n            <div className={classes.rememberMy}>\r\n                {createField<LoginFormKeyValuesType>('', 'rememberMy', [], CheckboxWrapper, {type: 'checkbox'}, 'remember my')}\r\n            </div>\r\n            {captcha && <img className={classes.captcha} src={captcha} alt={'captcha'}/>}\r\n            {captcha && createField<LoginFormKeyValuesType>('Symbols from image', 'captcha', [required], Input)}\r\n            {error && <div className={classes.formSummaryError}>{error}</div>}\r\n            <button className={classes.btn}>Login</button>\r\n        </form>\r\n    );\r\n};\r\nexport const LoginReduxForm = reduxForm<FormDataType, LoginFormOwnProps>({form: 'login'})(LoginForm)","import React from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {loginThunkCreator} from '../model/auth-reducer';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from 'app/model/redux-store';\r\nimport styles from './login.module.css'\r\nimport {FormDataType, LoginReduxForm} from './login-form/login-form';\r\n\r\nconst LoginPage = () => {\r\n\r\n    const captcha = useSelector((state: AppStateType) => state.auth.captcha)\r\n    const isAuth = useSelector((state: AppStateType) => state.auth.isAuth)\r\n    const dispatch = useDispatch()\r\n\r\n    const onSubmit = (formData: FormDataType) => {\r\n        dispatch(loginThunkCreator(formData.email, formData.password, formData.rememberMy, formData.captcha))\r\n    }\r\n\r\n    if (isAuth) return <Redirect to={'/profile'}/>\r\n\r\n    return (\r\n        <div className={styles.loginWrapper}>\r\n            <span className={styles.title}>Login</span>\r\n            <LoginReduxForm onSubmit={onSubmit} captcha={captcha}/>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default LoginPage\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"login-form_formControl__RbaCq\",\"formLabel\":\"login-form_formLabel__rMuJu\",\"link\":\"login-form_link__lkf5s\",\"rememberMy\":\"login-form_rememberMy__Lscph\",\"captcha\":\"login-form_captcha__R63ri\",\"btn\":\"login-form_btn__rz-gz\",\"formSummaryError\":\"login-form_formSummaryError__9uonN\"};"],"names":["required","value","getFormLabelUtilityClasses","slot","generateUtilityClass","generateUtilityClasses","_excluded","FormLabelRoot","styled","name","overridesResolver","styles","ownerState","_extends","root","color","colorSecondary","filled","theme","vars","palette","text","secondary","typography","body1","lineHeight","padding","position","formLabelClasses","main","disabled","error","AsteriskComponent","props","asterisk","FormLabel","React","inProps","ref","useThemeProps","children","className","component","other","_objectWithoutPropertiesLoose","fcs","states","muiFormControl","reduce","acc","state","formControlState","useFormControl","focused","classes","slots","capitalize","composeClasses","useUtilityClasses","_jsxs","as","clsx","LoginReduxForm","reduxForm","form","handleSubmit","captcha","onSubmit","Typography","href","target","rel","createField","Input","type","CheckboxWrapper","src","alt","useSelector","auth","isAuth","dispatch","useDispatch","to","formData","loginThunkCreator","email","password","rememberMy"],"sourceRoot":""}