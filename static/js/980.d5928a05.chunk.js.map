{"version":3,"file":"static/js/980.d5928a05.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/dialogs/ui/dialogs.module.css?4684","webpack://samurai-way/./src/components/dialogs/ui/dialog-item/dialog-item.module.css?e2a7","components/dialogs/ui/dialog-item/dialog-item.tsx","webpack://samurai-way/./src/components/dialogs/ui/messages/messages.module.css?a16a","webpack://samurai-way/./src/components/dialogs/ui/messages/my-message/my-message.module.css?fe71","components/dialogs/ui/messages/my-message/my-message.tsx","webpack://samurai-way/./src/components/dialogs/ui/messages/friend-message/friend-message.module.css?a43f","components/dialogs/ui/messages/friend-message/friend-message.tsx","components/dialogs/ui/messages/messages.tsx","components/dialogs/ui/dialogs-container.tsx","components/dialogs/ui/dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogsWrapper\":\"dialogs_dialogsWrapper__c7ndy\",\"dialogs\":\"dialogs_dialogs__mL3Ae\",\"messages\":\"dialogs_messages__FJPEL\",\"choose\":\"dialogs_choose__TMhsN\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"dialog-item_item__p9Nk9\",\"activeLink\":\"dialog-item_activeLink__RTx5C\",\"dialogAva\":\"dialog-item_dialogAva__oa8YX\"};","import React from 'react';\r\nimport classes from './dialog-item.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport dialogAva from 'assets/images/dialogsUser.png'\r\nimport {Typography} from \"@mui/material\";\r\n\r\nexport type PropsType = {\r\n    name: string,\r\n    id: number\r\n}\r\nconst DialogItem = (props: PropsType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <NavLink  to={'/dialogs/' + props.id} activeClassName={classes.activeLink}>\r\n                <img src={dialogAva} alt=\"ava\" className={classes.dialogAva}/>\r\n                <Typography variant={'body1'}>{props.name}</Typography>\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"messagesWrapper\":\"messages_messagesWrapper__Ix2oY\",\"messages\":\"messages_messages__nhTor\"};","// extracted by mini-css-extract-plugin\nexport default {\"myMessage\":\"my-message_myMessage__571Qk\",\"myImageAndText\":\"my-message_myImageAndText__yGxVZ\",\"myAvatar\":\"my-message_myAvatar__XT1hm\",\"myText\":\"my-message_myText__WY-tt\",\"myName\":\"my-message_myName__UZzZt\",\"myMessageText\":\"my-message_myMessageText__A4Qza\",\"myTime\":\"my-message_myTime__sbOcW\"};","import React from 'react';\r\nimport classes from './my-message.module.css';\r\nimport messageAva from 'assets/images/dialogsUser.png';\r\nimport {Typography} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    name: string | null\r\n    time: string\r\n    photo: string\r\n}\r\nexport const MyMessage = (props: PropsType) => {\r\n    return (\r\n        <div className={classes.myMessage}>\r\n            <div className={classes.myImageAndText}>\r\n                <img className={classes.myAvatar} alt={'myAvatar'}\r\n                     src={props.photo ? props.photo : messageAva}\r\n                />\r\n                <div className={classes.myText}>\r\n                    <div className={classes.myName}>\r\n                        <Typography variant={\"subtitle1\"}>{props.name !== null ? props.name : 'user Name'}</Typography>\r\n                    </div>\r\n                    <pre className={classes.myMessageText}>\r\n                        <Typography variant={\"body2\"}>{props.message}</Typography>\r\n                    </pre>\r\n                </div>\r\n            </div>\r\n            <div className={classes.myTime}>\r\n                {props.time}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"friendMessage\":\"friend-message_friendMessage__om2LM\",\"friendImageAndText\":\"friend-message_friendImageAndText__LQMAT\",\"friendAvatar\":\"friend-message_friendAvatar__RC+Q4\",\"friendText\":\"friend-message_friendText__g9TGw\",\"friendName\":\"friend-message_friendName__1YSOF\",\"friendMessageText\":\"friend-message_friendMessageText__bLdmh\",\"friendTime\":\"friend-message_friendTime__+HTjm\"};","import React from 'react';\r\nimport classes from './friend-message.module.css';\r\nimport messageAva from 'assets/images/dialogsUser.png';\r\nimport {Typography} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    message: string\r\n    name: string\r\n    time: string\r\n}\r\nexport const FriendMessage = (props: PropsType) => {\r\n    return (\r\n        <div  className={classes.friendMessage}>\r\n            <div className={classes.friendImageAndText}>\r\n                <img className={classes.friendAvatar}\r\n                     src={messageAva}\r\n                     alt={'friendAvatar'}\r\n                />\r\n                <div className={classes.friendText}>\r\n                    <div  className={classes.friendName}>\r\n                        <Typography variant={\"subtitle1\"}>{props.name}</Typography>\r\n                    </div>\r\n                    <pre className={classes.friendMessageText}>\r\n                        <Typography variant={\"body2\"}>{props.message}</Typography>\r\n                    </pre>\r\n                </div>\r\n            </div>\r\n            <div className={classes.friendTime}>\r\n                {props.time}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React, {useEffect, useRef} from 'react';\r\nimport classes from './messages.module.css'\r\nimport {useParams} from 'react-router-dom';\r\nimport {MyMessage} from './my-message/my-message';\r\nimport {FriendMessage} from './friend-message/friend-message';\r\nimport {AddItemForm} from 'common/components';\r\nimport {DialogItemType, MessagesType} from \"components/dialogs/model/dialogs-reducer\";\r\n\r\nexport type PropsType = {\r\n    messages: MessagesType\r\n    addNewMessage: (id: string, newMessageText: string) => void\r\n    login: string | null\r\n    names: DialogItemType[]\r\n    photo: string\r\n}\r\nexport const Messages = (props: PropsType) => {\r\n    const messagesBlock = useRef<HTMLDivElement | null>(null)\r\n    const params = useParams<{ id: string }>()\r\n\r\n    const messagesForMap = props.messages[params.id].map((el, index) => el.id !== 0\r\n        ?\r\n        <FriendMessage key={index} message={el.message} name={props.names[Number(params.id) - 1].name} time={el.time}/>\r\n        : <MyMessage key={index} message={el.message} name={props.login} time={el.time} photo={props.photo}/>\r\n    )\r\n\r\n    useEffect(() => {\r\n        messagesBlock.current?.scrollTo(0, messagesBlock.current.scrollHeight)\r\n    }, [props.messages])\r\n\r\n    const addNewMessageHandler = (text: string) => {\r\n        props.addNewMessage(params.id, text)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.messagesWrapper}>\r\n            <div ref={messagesBlock} className={classes.messages}>\r\n                {messagesForMap}\r\n            </div>\r\n            <AddItemForm callback={addNewMessageHandler} placeholder={'Enter your message'}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {addMessageActionCreator, DialogsPageType} from '../model/dialogs-reducer';\r\nimport {Dialogs} from './dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {AppStateType} from 'app/model/redux-store';\r\nimport {withAuthRedirect} from 'common/hoc';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    login: string | null\r\n    photo: string\r\n}\r\ntype MadDispatchToPropsType = {\r\n    addMessage: (dialogsId: string, newMessageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        login: state.auth.login,\r\n        photo: state.profilePage.profile.photos.large\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MadDispatchToPropsType => {\r\n    return {\r\n        addMessage: (dialogsId: string, newMessageText: string) => {\r\n            dispatch(addMessageActionCreator(dialogsId, newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer","import React from 'react';\r\nimport classes from './dialogs.module.css'\r\nimport DialogItem from './dialog-item/dialog-item';\r\nimport {DialogsPageType} from '../model/dialogs-reducer';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {Messages} from './messages/messages';\r\nimport messageIcon from '../../../assets/images/dialog.gif'\r\nimport {Typography} from \"@mui/material\";\r\n\r\ntype PropsType = {\r\n    dialogsPage: DialogsPageType\r\n    addMessage: (id: string, newMessageText: string) => void\r\n    login: string | null\r\n    photo: string\r\n}\r\nexport const Dialogs = (props: PropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map((d, index) => <DialogItem name={d.name} id={d.id} key={index}/>)\r\n\r\n    return (\r\n        <div className={classes.dialogsWrapper}>\r\n            <div className={classes.dialogs}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <Switch>\r\n                    <Route path={'/dialogs/:id'} render={() => <Messages messages={props.dialogsPage.messages}\r\n                                                                         addNewMessage={props.addMessage}\r\n                                                                         login={props.login}\r\n                                                                         names={props.dialogsPage.dialogs}\r\n                                                                         photo={props.photo}\r\n                    />}/>\r\n                    <Route path=\"/dialogs\" render={() => <div className={classes.choose}>\r\n                        <img src={messageIcon} alt=\"message\"/>\r\n                        <Typography variant={\"body1\"}>Choose a dialog...</Typography>\r\n                    </div>}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};"],"names":["props","className","classes","to","id","activeClassName","src","dialogAva","alt","Typography","variant","name","MyMessage","photo","messageAva","message","time","FriendMessage","Messages","messagesBlock","useRef","params","useParams","messagesForMap","messages","map","el","index","names","Number","login","useEffect","current","scrollTo","scrollHeight","ref","callback","text","addNewMessage","placeholder","compose","connect","state","dialogsPage","auth","profilePage","profile","photos","large","dispatch","addMessage","dialogsId","newMessageText","addMessageActionCreator","withAuthRedirect","dialogsElements","dialogs","d","path","render","messageIcon"],"sourceRoot":""}