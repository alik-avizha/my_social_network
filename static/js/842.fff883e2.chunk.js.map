{"version":3,"file":"static/js/842.fff883e2.chunk.js","mappings":"wNACA,EAA8B,+BAA9B,EAAwE,4BAAxE,EAA8G,2BAA9G,EAAwJ,gCAAxJ,EAAiM,0BAAjM,EAAkO,wBAAlO,EAAiQ,wBAAjQ,EAAuS,+BAAvS,EAA6V,wC,mEC8B7V,GAAeA,EAAAA,EAAAA,IARE,WACf,OACE,gBAAKC,UAAWC,EAAhB,UACE,SAACC,EAAD,SAOAA,EAAO,WACX,IAAMC,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UACzDI,GAAWC,EAAAA,EAAAA,MASjB,OAPAC,EAAAA,EAAAA,YAAU,WAER,OADAF,GAASG,EAAAA,EAAAA,OACF,WACLH,GAASI,EAAAA,EAAAA,UAEV,KAGD,gCACc,UAAXR,IACC,2EAEF,iCACE,SAACS,EAAD,KACA,SAACC,EAAD,WAMFD,EAAe,WACnB,IAAME,GAAoBC,EAAAA,EAAAA,QAAuB,MAC3CC,GAAWZ,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKU,YACjE,GAAwDC,EAAAA,EAAAA,WAAS,GAAjE,eAAOC,EAAP,KAA6BC,EAA7B,MAEAV,EAAAA,EAAAA,YAAU,WACmB,IAAD,EAAtBS,IACF,UAAAJ,EAAkBM,eAAlB,SAA2BC,eAAe,CAAEC,SAAU,cAEvD,CAACN,IAeJ,OACE,iBAAKhB,UAAWC,EAAYsB,SAdN,SAACC,GACvB,IAAMC,EAAUD,EAAEE,cAEhBC,KAAKC,IACHH,EAAQI,aAAeJ,EAAQK,UAAYL,EAAQM,cACjD,KAEHb,GAAwBC,GAAwB,GAEjDD,GAAwBC,GAAwB,IAKlD,iBACGH,QADH,IACGA,OADH,EACGA,EAAUgB,KAAI,SAACC,GAAD,OACb,SAACC,EAAD,CAEEC,MAAOF,EAAEE,MACTC,SAAUH,EAAEG,SACZC,QAASJ,EAAEI,SAHNJ,EAAEK,QAMX,gBAAKC,IAAKzB,QAUVoB,GAAwCM,EAAAA,EAAAA,OAC5C,YAAmC,IAAhCL,EAA+B,EAA/BA,MAAOC,EAAwB,EAAxBA,SAAUC,EAAc,EAAdA,QAClB,OACE,gBAAKrC,UAAWC,EAAhB,UACE,iBAAKD,UAAWC,EAAhB,WACE,gBACED,UAAWC,EACXwC,IAAK,WACLC,IAAKP,GAAgBQ,KAEvB,iBAAK3C,UAAWC,EAAhB,WACE,gBAAKD,UAAWC,EAAhB,UACE,SAAC2C,EAAA,EAAD,CAAYC,QAAS,YAArB,SAAmCT,OAErC,gBAAKpC,UAAWC,EAAhB,UACE,SAAC2C,EAAA,EAAD,CAAYC,QAAS,QAArB,SAA+BR,iBAShCxB,EAAkB,WAC7B,IAAMV,GAASC,EAAAA,EAAAA,KAAY,SAACC,GAAD,OAAyBA,EAAMC,KAAKH,UAC/D,GAA0Bc,EAAAA,EAAAA,UAAS,IAAnC,eAAO6B,EAAP,KAAcC,EAAd,KAEMxC,GAAWC,EAAAA,EAAAA,MAMXwC,EAAgB,WACfF,IAGLvC,GAAS0C,EAAAA,EAAAA,IAAwBH,IACjCC,EAAS,MAMX,OACE,iBAAK/C,UAAWC,EAAhB,WACE,qBACEiD,WAPoB,SAACC,GACX,UAAdA,EAAMC,KAAmBJ,KAOrBK,YAAa,mBACbP,MAAOA,EACPQ,SArBkB,SAAC9B,GACvBuB,EAASvB,EAAEE,cAAcoB,WAsBvB,SAAC,KAAD,CACES,KAAM,OACNC,SAAUR,EACVS,SAAqB,UAAXtD","sources":["webpack://samurai-way/./src/components/chat/ui/chat-page.module.css?b54d","components/chat/ui/chat-page.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"chatWrapper\":\"chat-page_chatWrapper__hJnmo\",\"messages\":\"chat-page_messages__aK5je\",\"message\":\"chat-page_message__As1ex\",\"imageAndText\":\"chat-page_imageAndText__uxSB1\",\"avatar\":\"chat-page_avatar__nHf5L\",\"text\":\"chat-page_text__+Khqt\",\"name\":\"chat-page_name__3lMYS\",\"messageText\":\"chat-page_messageText__5NOrs\",\"addNewContentWrapper\":\"chat-page_addNewContentWrapper__yZ5ch\"};","import React, {\r\n  ChangeEvent,\r\n  FC,\r\n  KeyboardEvent,\r\n  memo,\r\n  UIEvent,\r\n  useEffect,\r\n  useRef,\r\n  useState,\r\n} from \"react\";\r\nimport s from \"./chat-page.module.css\";\r\nimport { Button } from \"common/components\";\r\nimport { Typography } from \"@mui/material\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n  sendMessageThunkCreator,\r\n  startMessagesListeningThunkCreator,\r\n  stopMessagesListeningThunkCreator,\r\n} from \"components/chat/model/chat-reducer\";\r\nimport { AppStateType } from \"app/model/redux-store\";\r\nimport { withAuthRedirect } from \"common/hoc\";\r\nimport defaultPhoto from \"../../../assets/images/user.jpg\";\r\n\r\nconst ChatPage = () => {\r\n  return (\r\n    <div className={s.chatWrapper}>\r\n      <Chat />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default withAuthRedirect(ChatPage);\r\n\r\nconst Chat = () => {\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n  const dispatch = useDispatch();\r\n\r\n  useEffect(() => {\r\n    dispatch(startMessagesListeningThunkCreator());\r\n    return () => {\r\n      dispatch(stopMessagesListeningThunkCreator());\r\n    };\r\n  }, []);\r\n\r\n  return (\r\n    <>\r\n      {status === \"error\" && (\r\n        <div>Some error occurred. Please refresh the page</div>\r\n      )}\r\n      <>\r\n        <ChatMessages />\r\n        <AddIMessageForm />\r\n      </>\r\n    </>\r\n  );\r\n};\r\n\r\nconst ChatMessages = () => {\r\n  const messagesAnchorRef = useRef<HTMLDivElement>(null);\r\n  const messages = useSelector((state: AppStateType) => state.chat.messages);\r\n  const [isAutoScrollIsActive, setIsAutoScrollIsActive] = useState(true);\r\n\r\n  useEffect(() => {\r\n    if (isAutoScrollIsActive) {\r\n      messagesAnchorRef.current?.scrollIntoView({ behavior: \"smooth\" });\r\n    }\r\n  }, [messages]);\r\n\r\n  const onScrollHandler = (e: UIEvent<HTMLDivElement>) => {\r\n    const element = e.currentTarget;\r\n    if (\r\n      Math.abs(\r\n        element.scrollHeight - element.scrollTop - element.clientHeight\r\n      ) < 300\r\n    ) {\r\n      !isAutoScrollIsActive && setIsAutoScrollIsActive(true);\r\n    } else {\r\n      isAutoScrollIsActive && setIsAutoScrollIsActive(false);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={s.messages} onScroll={onScrollHandler}>\r\n      {messages?.map((m) => (\r\n        <ChatMessage\r\n          key={m.id}\r\n          photo={m.photo}\r\n          userName={m.userName}\r\n          message={m.message}\r\n        />\r\n      ))}\r\n      <div ref={messagesAnchorRef}></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport type ChatMessagePropsType = {\r\n  photo: string;\r\n  userName: string;\r\n  message: string;\r\n};\r\nconst ChatMessage: FC<ChatMessagePropsType> = memo(\r\n  ({ photo, userName, message }) => {\r\n    return (\r\n      <div className={s.message}>\r\n        <div className={s.imageAndText}>\r\n          <img\r\n            className={s.avatar}\r\n            alt={\"myAvatar\"}\r\n            src={photo ? photo : defaultPhoto}\r\n          />\r\n          <div className={s.text}>\r\n            <div className={s.name}>\r\n              <Typography variant={\"subtitle1\"}>{userName}</Typography>\r\n            </div>\r\n            <pre className={s.messageText}>\r\n              <Typography variant={\"body2\"}>{message}</Typography>\r\n            </pre>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n);\r\n\r\nexport const AddIMessageForm = () => {\r\n  const status = useSelector((state: AppStateType) => state.chat.status);\r\n  const [value, setValue] = useState(\"\");\r\n\r\n  const dispatch = useDispatch();\r\n\r\n  const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n    setValue(e.currentTarget.value);\r\n  };\r\n\r\n  const addNewMessage = () => {\r\n    if (!value) {\r\n      return;\r\n    }\r\n    dispatch(sendMessageThunkCreator(value));\r\n    setValue(\"\");\r\n  };\r\n  const onKeyPressHandler = (event: KeyboardEvent<HTMLTextAreaElement>) => {\r\n    event.key === \"Enter\" && addNewMessage();\r\n  };\r\n\r\n  return (\r\n    <div className={s.addNewContentWrapper}>\r\n      <textarea\r\n        onKeyPress={onKeyPressHandler}\r\n        placeholder={\"send new message\"}\r\n        value={value}\r\n        onChange={onChangeHandler}\r\n      />\r\n      <Button\r\n        name={\"send\"}\r\n        callback={addNewMessage}\r\n        disabled={status !== \"ready\"}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n"],"names":["withAuthRedirect","className","s","Chat","status","useSelector","state","chat","dispatch","useDispatch","useEffect","startMessagesListeningThunkCreator","stopMessagesListeningThunkCreator","ChatMessages","AddIMessageForm","messagesAnchorRef","useRef","messages","useState","isAutoScrollIsActive","setIsAutoScrollIsActive","current","scrollIntoView","behavior","onScroll","e","element","currentTarget","Math","abs","scrollHeight","scrollTop","clientHeight","map","m","ChatMessage","photo","userName","message","id","ref","memo","alt","src","defaultPhoto","Typography","variant","value","setValue","addNewMessage","sendMessageThunkCreator","onKeyPress","event","key","placeholder","onChange","name","callback","disabled"],"sourceRoot":""}