{"version":3,"file":"static/js/851.28894b36.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/MessageItem/MessageItem.tsx","components/Dialogs/Dialogs.tsx","hoc/withAuthRedirect.tsx","components/Dialogs/DialogsContainer.tsx","components/common/FormsControls/FormsControls.tsx","utils/validators/validators.ts","webpack://samurai-way/./src/components/common/FormsControls/FormsControls.module.css?eb50"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__6Cege\",\"dialogsItems\":\"Dialogs_dialogsItems__jftaY\",\"active\":\"Dialogs_active__+FIrF\",\"messages\":\"Dialogs_messages__DGHNR\",\"message\":\"Dialogs_message__Ivjc6\"};","import React from 'react';\r\nimport classes from './../Dialogs.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\n\r\nexport type DialogItemType = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={classes.dialog + ' ' + classes.active}>\r\n            <NavLink to={'/dialogs/' + props.id}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","import React from 'react';\r\nimport classes from './../Dialogs.module.css'\r\n\r\nexport type MessageItemType = {\r\n    id?: number\r\n    message: string\r\n}\r\n\r\nconst MessageItem = (props: MessageItemType) => {\r\n    return (\r\n        <div className={classes.message}>{props.message}</div>\r\n    )\r\n}\r\n\r\nexport default MessageItem;","import React from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport MessageItem from './MessageItem/MessageItem';\r\nimport {DialogsPageType} from '../../redux/dialogs-reducer';\r\nimport {Field, InjectedFormProps, reduxForm} from 'redux-form';\r\nimport {Textarea} from '../common/FormsControls/FormsControls';\r\nimport {maxLengthCreator, required} from '../../utils/validators/validators';\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    addMessage: (newMessageText: string) => void\r\n}\r\ntype AddMessageFormType = {\r\n    newMessageText: string\r\n}\r\n\r\nconst maxLength50= maxLengthCreator(50)\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map((d, index) => <DialogItem name={d.name} id={d.id} key={index}/>)\r\n\r\n    let messagesElements = props.dialogsPage.messages\r\n        .map((m, index) => <MessageItem message={m.message} key={index}/>)\r\n\r\n    let addNewMessage = (values: AddMessageFormType) => {\r\n        props.addMessage(values.newMessageText)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <div>{messagesElements}</div>\r\n                <AddMessageFormRedux onSubmit={addNewMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const AddMessageForm: React.FC<InjectedFormProps<AddMessageFormType>> = (props) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <div>\r\n                <Field\r\n                    component={Textarea}\r\n                    name=\"newMessageText\"\r\n                    placeholder=\"Enter your message\"\r\n                    validate={[required, maxLength50]}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button>Add</button>\r\n            </div>\r\n        </form>\r\n\r\n    )\r\n}\r\nconst AddMessageFormRedux = reduxForm<AddMessageFormType>({form: 'AddMessageForm'})(AddMessageForm)","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent =  (props: MapStateToProps) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n","import React from 'react';\r\nimport {addMessageActionCreator, DialogsPageType} from '../../redux/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n}\r\ntype MadDispatchToPropsType = {\r\n    addMessage: (newMessageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MadDispatchToPropsType => {\r\n    return {\r\n        addMessage: (newMessageText: string) => {\r\n            dispatch(addMessageActionCreator(newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer","import React from 'react';\r\nimport classes from './FormsControls.module.css'\r\nimport {Field} from 'redux-form';\r\n\r\ntype FormControlProps = {\r\n    input: {\r\n        name: string;\r\n    };\r\n    meta: {\r\n        touched?: boolean;\r\n        error?: string;\r\n    }\r\n    children: React.ReactNode\r\n};\r\n\r\nexport const FormControl: React.FC<FormControlProps> = (props) => {\r\n\r\n    const {input, meta: {touched , error}, children} = props\r\n\r\n    const hasError = touched && error;\r\n    return (\r\n        <div className={classes.formControl + ' ' + (hasError ? classes.error : '')} {...props}>\r\n            <div>{children}</div>\r\n            {hasError && <span>{error}</span>}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport const Input: React.FC<FormControlProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <input {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const Textarea: React.FC<FormControlProps> = (props) => {\r\n    const {input, meta, ...restProps} = props;\r\n    return (\r\n        <FormControl {...props}>\r\n            <textarea {...input} {...restProps} />\r\n        </FormControl>\r\n    );\r\n};\r\n\r\nexport const createField = (placeholder: string,\r\n                            name: string,\r\n                            validators: any[],\r\n                            component: React.FC<FormControlProps>,\r\n                            props?: { type: string },\r\n                            text: string = '') => {\r\n    return (\r\n        <div>\r\n            <Field placeholder={placeholder}\r\n                   name={name}\r\n                   component={component}\r\n                   validate={validators}\r\n                   {...props}/>\r\n            {text}\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\n\r\n","export const required = (value: string) => {\r\n    if (value) return undefined\r\n    return 'Field is required'\r\n}\r\n\r\n\r\nexport const maxLengthCreator = (maxLength: number) => (value: string) => {\r\n    if (value.length > maxLength) return `Max length is ${maxLength} symbols`\r\n    return undefined\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"FormsControls_formControl__4tOrb\",\"error\":\"FormsControls_error__Q4DIq\",\"formSummaryError\":\"FormsControls_formSummaryError__u8JeD\"};"],"names":["props","className","classes","to","id","name","message","maxLength50","maxLengthCreator","AddMessageFormRedux","reduxForm","form","onSubmit","handleSubmit","Field","component","Textarea","placeholder","validate","required","mapStateToPropsForRedirect","state","isAuth","auth","compose","connect","dialogsPage","dispatch","addMessage","newMessageText","addMessageActionCreator","Component","restProps","dialogsElements","dialogs","map","d","index","messagesElements","messages","m","values","FormControl","input","meta","touched","error","children","hasError","Input","createField","validators","text","value","maxLength","length"],"sourceRoot":""}