{"version":3,"file":"static/js/838.b6f07d10.chunk.js","mappings":"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","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://samurai-way/./src/components/Dialogs/DialogItem/DialogItem.module.css?beb9","components/Dialogs/DialogItem/DialogItem.tsx","webpack://samurai-way/./src/components/Dialogs/Messages/Messages.module.css?2673","webpack://samurai-way/./src/components/Dialogs/Messages/MyMessage/MyMessage.module.css?5c05","components/Dialogs/Messages/MyMessage/MyMessage.tsx","webpack://samurai-way/./src/components/Dialogs/Messages/FriendMessage/FriendMessage.module.css?b951","components/Dialogs/Messages/FriendMessage/FriendMessage.tsx","components/Dialogs/Messages/Messages.tsx","components/Dialogs/DialogsContainer.tsx","components/Dialogs/Dialogs.tsx","webpack://samurai-way/./src/components/common/Button/Button.module.css?9e52","components/common/Button/Button.tsx","webpack://samurai-way/./src/components/common/SenderContent/SenderContent.module.css?d1f7","components/common/SenderContent/SenderContent.tsx","hoc/withAuthRedirect.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__6Cege\",\"dialogsItems\":\"Dialogs_dialogsItems__jftaY\",\"messages\":\"Dialogs_messages__DGHNR\",\"choose\":\"Dialogs_choose__k9KDw\"};","// extracted by mini-css-extract-plugin\nexport default {\"item\":\"DialogItem_item__GU6Y4\",\"activeLink\":\"DialogItem_activeLink__2AqBr\",\"dialogAva\":\"DialogItem_dialogAva__Poo7u\"};","import React from 'react';\r\nimport classes from './DialogItem.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport dialogAva from '../../../assets/images/dialogsUser.png'\r\n\r\nexport type DialogItemType = {\r\n    name: string,\r\n    id: number\r\n}\r\n\r\nconst DialogItem = (props: DialogItemType) => {\r\n    return (\r\n        <div className={classes.item}>\r\n            <NavLink  to={'/dialogs/' + props.id} activeClassName={classes.activeLink}>\r\n                <img src={dialogAva} alt=\"ava\" className={classes.dialogAva}/>\r\n                {props.name}\r\n            </NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default DialogItem;","// extracted by mini-css-extract-plugin\nexport default {\"messagesWrapper\":\"Messages_messagesWrapper__PNOle\",\"messages\":\"Messages_messages__7smz-\"};","// extracted by mini-css-extract-plugin\nexport default {\"myMessage\":\"MyMessage_myMessage__9cb2W\",\"myImageAndText\":\"MyMessage_myImageAndText__EgsFU\",\"myAvatar\":\"MyMessage_myAvatar__UCNX6\",\"myText\":\"MyMessage_myText__u9zT2\",\"myName\":\"MyMessage_myName__3zi6b\",\"myMessageText\":\"MyMessage_myMessageText__Dqves\",\"myTime\":\"MyMessage_myTime__mE1N1\"};","import React from 'react';\r\nimport classes from './MyMessage.module.css';\r\nimport messageAva from '../../../../assets/images/dialogsUser.png';\r\n\r\n\r\ntype MainMessagePropsType = {\r\n    message: string\r\n    name: string | null\r\n    time: string\r\n    photo: string\r\n}\r\n\r\nexport const MyMessage = (props: MainMessagePropsType) => {\r\n    return (\r\n        <div className={classes.myMessage}>\r\n            <div className={classes.myImageAndText}>\r\n                <img className={classes.myAvatar} alt={'myAvatar'}\r\n                     src={props.photo ? props.photo : messageAva}\r\n                />\r\n                <div className={classes.myText}>\r\n                    <div className={classes.myName}>\r\n                        {props.name !== null ? props.name : 'User Name'}\r\n                    </div>\r\n                    <pre className={classes.myMessageText}>\r\n                        {props.message}\r\n                    </pre>\r\n                </div>\r\n            </div>\r\n            <div className={classes.myTime}>\r\n                {props.time}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"friendMessage\":\"FriendMessage_friendMessage__mUu8w\",\"friendImageAndText\":\"FriendMessage_friendImageAndText__kULEt\",\"friendAvatar\":\"FriendMessage_friendAvatar__vHYe4\",\"friendText\":\"FriendMessage_friendText__TdsyD\",\"friendName\":\"FriendMessage_friendName__pR8M2\",\"friendMessageText\":\"FriendMessage_friendMessageText__zVXMk\",\"friendTime\":\"FriendMessage_friendTime__oHtJI\"};","import React from 'react';\r\nimport classes from './FriendMessage.module.css';\r\nimport messageAva from '../../../../assets/images/dialogsUser.png';\r\n\r\n\r\ntype MainMessagePropsType = {\r\n    message: string\r\n    name: string\r\n    time: string\r\n}\r\n\r\nexport const FriendMessage = (props: MainMessagePropsType) => {\r\n    return (\r\n        <div  className={classes.friendMessage}>\r\n            <div className={classes.friendImageAndText}>\r\n                <img className={classes.friendAvatar}\r\n                     src={messageAva}\r\n                     alt={'friendAvatar'}\r\n                />\r\n                <div className={classes.friendText}>\r\n                    <div  className={classes.friendName}>\r\n                        {props.name}\r\n                    </div>\r\n                    <pre className={classes.friendMessageText}>\r\n                            {props.message}\r\n                    </pre>\r\n                </div>\r\n            </div>\r\n            <div className={classes.friendTime}>\r\n                {props.time}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n","import React from 'react';\r\nimport classes from './Messages.module.css'\r\nimport {DialogItemType} from '../DialogItem/DialogItem';\r\nimport {useParams} from 'react-router-dom';\r\nimport {MyMessage} from './MyMessage/MyMessage';\r\nimport {FriendMessage} from './FriendMessage/FriendMessage';\r\nimport {SenderContent} from '../../common/SenderContent/SenderContent';\r\n\r\nexport type MessageItemType = {\r\n    id: number\r\n    message: string\r\n    time: string\r\n}\r\n\r\nexport type MessagesType = {\r\n    [key: string]: MessageItemType[]\r\n}\r\n\r\nexport type MessageItemPropsType = {\r\n    messages: MessagesType\r\n    addNewMessage: (id: string, newMessageText: string) => void\r\n    login: string | null\r\n    names: DialogItemType[]\r\n    photo: string\r\n}\r\nexport const Messages = (props: MessageItemPropsType) => {\r\n\r\n    const params = useParams<{ id: string }>()\r\n\r\n    const messagesForMap = props.messages[params.id].map((el, index) => el.id !== 0\r\n        ? <FriendMessage key={index} message={el.message} name={props.names[Number(params.id) - 1].name} time={el.time}/>\r\n        : <MyMessage key={index} message={el.message} name={props.login} time={el.time} photo={props.photo}/>\r\n    )\r\n\r\n    const addNewMessageHandler = (text: string) => {\r\n        props.addNewMessage(params.id, text)\r\n    }\r\n\r\n    return (\r\n        <div className={classes.messagesWrapper}>\r\n            <div className={classes.messages}>\r\n                {messagesForMap}\r\n            </div>\r\n            <SenderContent callback={addNewMessageHandler} placeholder={'Enter your message'}/>\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {addMessageActionCreator, DialogsPageType} from '../../redux/dialogs/dialogs-reducer';\r\nimport {Dialogs} from './Dialogs';\r\nimport {connect} from 'react-redux';\r\nimport {compose, Dispatch} from 'redux';\r\nimport {AppStateType} from '../../redux/redux-store';\r\nimport {withAuthRedirect} from '../../hoc/withAuthRedirect';\r\n\r\ntype MapStateToPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    login: string | null\r\n    photo: string\r\n}\r\ntype MadDispatchToPropsType = {\r\n    addMessage: (dialogsId: string, newMessageText: string) => void\r\n}\r\n\r\nlet mapStateToProps = (state: AppStateType): MapStateToPropsType => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n        login: state.auth.login,\r\n        photo: state.profilePage.profile.photos.large\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch): MadDispatchToPropsType => {\r\n    return {\r\n        addMessage: (dialogsId: string, newMessageText: string) => {\r\n            dispatch(addMessageActionCreator(dialogsId, newMessageText))\r\n        }\r\n    }\r\n}\r\n\r\nconst DialogsContainer = compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)\r\n\r\nexport default DialogsContainer","import React from 'react';\r\nimport classes from './Dialogs.module.css'\r\nimport DialogItem from './DialogItem/DialogItem';\r\nimport {DialogsPageType} from '../../redux/dialogs/dialogs-reducer';\r\nimport {Route, Switch} from 'react-router-dom';\r\nimport {Messages} from './Messages/Messages';\r\n\r\ntype DialogsPropsType = {\r\n    dialogsPage: DialogsPageType\r\n    addMessage: (id: string, newMessageText: string) => void\r\n    login: string | null\r\n    photo: string\r\n}\r\n\r\nexport const Dialogs = (props: DialogsPropsType) => {\r\n\r\n    let dialogsElements = props.dialogsPage.dialogs\r\n        .map((d, index) => <DialogItem name={d.name} id={d.id} key={index}/>)\r\n\r\n    return (\r\n        <div className={classes.dialogs}>\r\n            <div className={classes.dialogsItems}>\r\n                {dialogsElements}\r\n            </div>\r\n            <div className={classes.messages}>\r\n                <Switch>\r\n                    <Route path={'/dialogs/:id'} render={() => <Messages messages={props.dialogsPage.messages}\r\n                                                                         addNewMessage={props.addMessage}\r\n                                                                         login={props.login}\r\n                                                                         names={props.dialogsPage.dialogs}\r\n                                                                         photo={props.photo}\r\n                    />}/>\r\n                    <Route path=\"/dialogs\" render={() => <div className={classes.choose}><h3>Please select a dialog</h3></div>}/>\r\n                </Switch>\r\n            </div>\r\n        </div>\r\n    );\r\n};","// extracted by mini-css-extract-plugin\nexport default {\"btn\":\"Button_btn__fsSX9\"};","import React from 'react';\r\nimport classes from './Button.module.css'\r\n\r\ntype ButtonPropsType = {\r\n    name: string\r\n    callback?: () => void\r\n    disabled?: boolean\r\n\r\n}\r\n\r\nexport const Button = (props: ButtonPropsType) => {\r\n        return (\r\n        <button className={classes.btn} onClick={props.callback} disabled={props.disabled ? props.disabled : false}>{props.name}</button>\r\n    );\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {\"addNewContentWrapper\":\"SenderContent_addNewContentWrapper__kiIxe\"};","import React, {ChangeEvent, KeyboardEvent, useState} from 'react';\r\nimport classes from './SenderContent.module.css';\r\nimport {Button} from '../Button/Button';\r\n\r\ntype PostFormSenderPropsType = {\r\n    callback: (newMessage: string) => void\r\n    placeholder: string\r\n}\r\n\r\nexport const SenderContent = (props: PostFormSenderPropsType) => {\r\n\r\n    const [value, setValue] = useState('')\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLTextAreaElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    const addNewContentHandler = () => {\r\n        props.callback(value)\r\n        setValue('')\r\n    }\r\n    const onKeyPressHandler = (event: KeyboardEvent<HTMLTextAreaElement>) => {\r\n        event.key === 'Enter' && addNewContentHandler()\r\n    }\r\n\r\n    return (\r\n        <div className={classes.addNewContentWrapper}>\r\n            <textarea onKeyPress={onKeyPressHandler} placeholder={props.placeholder}\r\n                      value={value} onChange={onChangeHandler}/>\r\n            <Button name={'send'} callback={addNewContentHandler} disabled={value === ''}/>\r\n        </div>\r\n    );\r\n};","import React, {Component, ComponentType} from 'react';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {AppStateType} from '../redux/redux-store';\r\nimport {connect} from 'react-redux';\r\n\r\ntype MapStateToProps = {\r\n    isAuth: boolean\r\n}\r\n\r\nlet mapStateToPropsForRedirect = (state: AppStateType): MapStateToProps => {\r\n    return {\r\n        isAuth: state.auth.isAuth\r\n    }\r\n}\r\n\r\nexport function withAuthRedirect<T>(Component: ComponentType<T>) {\r\n    const RedirectComponent =  (props: MapStateToProps) => {\r\n        let {isAuth, ...restProps} = props\r\n        if (!props.isAuth) return <Redirect to={'/login'}/>\r\n        return <Component {...restProps as T}/>\r\n    }\r\n    return connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n}\r\n"],"names":["props","className","classes","to","id","activeClassName","src","dialogAva","alt","name","MyMessage","photo","messageAva","message","time","FriendMessage","Messages","params","useParams","messagesForMap","messages","map","el","index","names","Number","login","SenderContent","callback","text","addNewMessage","placeholder","compose","connect","state","dialogsPage","auth","profilePage","profile","photos","large","dispatch","addMessage","dialogsId","newMessageText","addMessageActionCreator","withAuthRedirect","dialogsElements","dialogs","d","path","render","Button","onClick","disabled","useState","value","setValue","addNewContentHandler","onKeyPress","event","key","onChange","e","currentTarget","mapStateToPropsForRedirect","isAuth","Component","restProps"],"sourceRoot":""}